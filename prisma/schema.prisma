// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GuestStatus {
  PENDENTE
  CONFIRMADO_PRESENCA
  CONFIRMADO_AUSENCIA
}

enum MessageStatus {
  NAO_ENVIADA
  ENVIADA
  ERRO
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String    @default("active")
  date        DateTime?
  type        String?
  budget      Decimal?  @db.Decimal(10, 2)
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  workspaceId String
  guests      Guest[]
  documents   Document[]
  whatsappConfigs WhatsAppConfig[]
  guestListSettings GuestListSettings?

  @@index([userId])
  @@index([workspaceId])
  @@map("projects")
}

model Guest {
  id            String      @id @default(uuid())
  name          String
  phone         String?     // Número de telefone do convidado
  status        String      @default("PENDENTE")
  messageStatus MessageStatus @default(NAO_ENVIADA)
  children_0_6  Int        @default(0)
  children_7_10 Int        @default(0)
  observations  String?    @db.Text  // Campo para observações
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  companions    Companion[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([projectId])
  @@map("guests")
}

model Companion {
  id        String      @id @default(cuid())
  name      String
  status    GuestStatus @default(PENDENTE)
  guestId   String
  guest     Guest       @relation(fields: [guestId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([guestId])
}

model Document {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String    // Tipo do arquivo (pdf, doc, image)
  size        Int       // Tamanho em bytes
  content     String    @db.Text // Conteúdo do arquivo em base64
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
  @@map("documents")
}

model WhatsAppConfig {
  id          String   @id @default(uuid())
  projectId   String   @unique
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  introduction String  @db.Text
  conclusion   String  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("whatsapp_configs")
}

model GuestListSettings {
  id            String   @id @default(uuid())
  projectId     String   @unique
  project       Project  @relation(fields: [projectId], references: [id])
  showPhone     Boolean  @default(true)
  showStatus    Boolean  @default(true)
  showCompanions Boolean @default(true)
  showMessageStatus Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("guest_list_settings")
}
